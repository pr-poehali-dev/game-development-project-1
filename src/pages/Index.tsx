import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

interface StoryNode {
  id: string;
  text: string;
  character?: string;
  choices?: { text: string; next: string; emoji?: string }[];
  background?: string;
}

const story: Record<string, StoryNode> = {
  start: {
    id: 'start',
    character: 'üåå',
    text: '–í—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –≤ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–º –º–µ—Å—Ç–µ. –í–æ–∫—Ä—É–≥ —Ç–µ–º–Ω–æ—Ç–∞, –ª–∏—à—å —Å–ª–∞–±–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –≥–¥–µ-—Ç–æ –≤–ø–µ—Ä–µ–¥–∏. –ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ?',
    background: 'linear-gradient(135deg, #1a1f2c 0%, #2d1b4e 100%)',
    choices: [
      { text: '–ü–æ–π—Ç–∏ –∫ —Å–≤–µ—á–µ–Ω–∏—é', next: 'light', emoji: 'üí°' },
      { text: '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –≤–æ–∫—Ä—É–≥', next: 'look', emoji: 'üëÄ' },
      { text: '–ü–æ–∑–≤–∞—Ç—å –Ω–∞ –ø–æ–º–æ—â—å', next: 'call', emoji: 'üì¢' }
    ]
  },
  light: {
    id: 'light',
    character: '‚ú®',
    text: '–í—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É —Å–≤–µ—Ç–∞. –≠—Ç–æ –¥—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π –º–∞–≥–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π. –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –µ–≥–æ —Å–∏–ª—É.',
    background: 'linear-gradient(135deg, #2d1b4e 0%, #8b5cf6 100%)',
    choices: [
      { text: '–í–∑—è—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', next: 'take', emoji: 'üîÆ' },
      { text: '–ò–∑—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ', next: 'study', emoji: 'üîç' },
      { text: '–û—Ç–æ–π—Ç–∏ –Ω–∞–∑–∞–¥', next: 'back', emoji: '‚¨ÖÔ∏è' }
    ]
  },
  look: {
    id: 'look',
    character: 'üó∫Ô∏è',
    text: '–û—Å–º–∞—Ç—Ä–∏–≤–∞—è—Å—å, –≤—ã –∑–∞–º–µ—á–∞–µ—Ç–µ –¥—Ä–µ–≤–Ω–∏–µ –ø–∏—Å—å–º–µ–Ω–∞ –Ω–∞ —Å—Ç–µ–Ω–∞—Ö. –û–Ω–∏ —Å–≤–µ—Ç—è—Ç—Å—è —Å–ª–∞–±—ã–º –≥–æ–ª—É–±—ã–º —Å–≤–µ—Ç–æ–º –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–±—ã—Ç–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏.',
    background: 'linear-gradient(135deg, #1a1f2c 0%, #0ea5e9 50%, #2d1b4e 100%)',
    choices: [
      { text: '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∏—Å—å–º–µ–Ω–∞', next: 'read', emoji: 'üìú' },
      { text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', next: 'explore', emoji: 'üö∂' },
      { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', next: 'start', emoji: '‚Ü©Ô∏è' }
    ]
  },
  call: {
    id: 'call',
    character: 'üîä',
    text: '–í–∞—à –≥–æ–ª–æ—Å —ç—Ö–æ–º —Ä–∞–∑–Ω–æ—Å–∏—Ç—Å—è –≤ —Ç–µ–º–Ω–æ—Ç–µ. –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –≤—ã —Å–ª—ã—à–∏—Ç–µ –æ—Ç–≤–µ—Ç... –Ω–æ —ç—Ç–æ –Ω–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å.',
    background: 'linear-gradient(135deg, #1a1f2c 0%, #d946ef 100%)',
    choices: [
      { text: '–ü—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∑–≤—É–∫–∞', next: 'approach', emoji: 'üé≠' },
      { text: '–°–ø—Ä—è—Ç–∞—Ç—å—Å—è', next: 'hide', emoji: 'ü´£' },
      { text: '–£–±–µ–∂–∞—Ç—å', next: 'run', emoji: 'üí®' }
    ]
  },
  take: {
    id: 'take',
    character: '‚ö°',
    text: '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –≤–∞—Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Å–∏–ª–æ–π! –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ –¥—Ä–µ–≤–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –≤–∞—à —Ä–∞–∑—É–º. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –º–∏—Ä.',
    background: 'linear-gradient(135deg, #8b5cf6 0%, #d946ef 50%, #f97316 100%)',
    choices: [
      { text: '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', next: 'start', emoji: 'üîÑ' }
    ]
  },
  study: {
    id: 'study',
    character: 'üßô',
    text: '–í—ã –∏–∑—É—á–∞–µ—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ. –≠—Ç–æ –¥—Ä–µ–≤–Ω–∏–π –∫–ª—é—á –∫ –ø–æ—Ä—Ç–∞–ª—É –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –æ–ø–∞—Å–Ω–æ, –Ω–æ –∑–∞–º–∞–Ω—á–∏–≤–æ.',
    background: 'linear-gradient(135deg, #2d1b4e 0%, #7e69ab 100%)',
    choices: [
      { text: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç–∞–ª', next: 'portal', emoji: 'üåÄ' },
      { text: '–û—Å—Ç–∞–≤–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', next: 'leave', emoji: 'üö™' }
    ]
  },
  back: {
    id: 'back',
    character: 'üåë',
    text: '–í—ã —Ä–µ—à–∞–µ—Ç–µ –Ω–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å –∏ –æ—Ç—Å—Ç—É–ø–∞–µ—Ç–µ –≤ —Ç–µ–º–Ω–æ—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –±—ã–ª–æ –º—É–¥—Ä—ã–º —Ä–µ—à–µ–Ω–∏–µ–º...',
    background: 'linear-gradient(135deg, #1a1f2c 0%, #000000 100%)',
    choices: [
      { text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', next: 'start', emoji: 'üîÑ' }
    ]
  },
  read: {
    id: 'read',
    character: 'üìñ',
    text: '–ü–∏—Å—å–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –≤–∞–º —Ç–∞–π–Ω—É: —ç—Ç–æ –º–µ—Å—Ç–æ - —Ö—Ä–∞–º –≤—Ä–µ–º–µ–Ω–∏. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ, –Ω–æ –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.',
    background: 'linear-gradient(135deg, #0ea5e9 0%, #8b5cf6 100%)',
    choices: [
      { text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ', next: 'change', emoji: '‚è∞' },
      { text: '–ü—Ä–∏–Ω—è—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ', next: 'accept', emoji: '‚úÖ' }
    ]
  },
  explore: {
    id: 'explore',
    character: 'üóø',
    text: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –¥—Ä–µ–≤–Ω—é—é —Å—Ç–∞—Ç—É—é —Å—Ç—Ä–∞–∂–∞. –í –µ—ë –≥–ª–∞–∑–∞—Ö –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤–∞—à–∞ –¥—É—à–∞. –ß—Ç–æ –æ–Ω–∞ –≤–∏–¥–∏—Ç?',
    background: 'linear-gradient(135deg, #2d1b4e 0%, #1a1f2c 100%)',
    choices: [
      { text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å', next: 'light', emoji: '‚û°Ô∏è' },
      { text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', next: 'start', emoji: 'üîÑ' }
    ]
  },
  approach: {
    id: 'approach',
    character: 'üëª',
    text: '–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–∑—Ä–∞—á–Ω–∞—è —Ñ–∏–≥—É—Ä–∞. –≠—Ç–æ –¥—Ä–µ–≤–Ω–∏–π —Å—Ç—Ä–∞–∂ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞. –û–Ω –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –≤—ã–±–æ—Ä.',
    background: 'linear-gradient(135deg, #d946ef 0%, #8b5cf6 100%)',
    choices: [
      { text: '–í—ã—Å–ª—É—à–∞—Ç—å —Å—Ç—Ä–∞–∂–∞', next: 'listen', emoji: 'üëÇ' },
      { text: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', next: 'refuse', emoji: 'üôÖ' }
    ]
  },
  hide: {
    id: 'hide',
    character: 'üåö',
    text: '–í—ã –ø—Ä—è—á–µ—Ç–µ—Å—å –≤ —Ç–µ–Ω–∏. –°—Ç—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∏–º–æ, –Ω–µ –∑–∞–º–µ—Ç–∏–≤ –≤–∞—Å. –í—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏... –ø–æ–∫–∞.',
    background: 'linear-gradient(135deg, #000000 0%, #1a1f2c 100%)',
    choices: [
      { text: '–í—ã–π—Ç–∏ –∏–∑ —É–∫—Ä—ã—Ç–∏—è', next: 'start', emoji: 'üö∂' }
    ]
  },
  run: {
    id: 'run',
    character: 'üí®',
    text: '–í—ã –±–µ–∂–∏—Ç–µ –Ω–µ –æ–≥–ª—è–¥—ã–≤–∞—è—Å—å! –í –ø–∞–Ω–∏–∫–µ –≤—ã —Ç–µ—Ä—è–µ—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å –≤ –µ—â—ë –±–æ–ª–µ–µ —Å—Ç—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ.',
    background: 'linear-gradient(135deg, #1a1f2c 0%, #f97316 100%)',
    choices: [
      { text: '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', next: 'start', emoji: 'üîÑ' }
    ]
  },
  portal: {
    id: 'portal',
    character: 'üåå',
    text: '–ü–æ—Ä—Ç–∞–ª –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è! –í—ã —à–∞–≥–∞–µ—Ç–µ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å –≤ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–æ–º –º–∏—Ä–µ. –í–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!',
    background: 'linear-gradient(135deg, #8b5cf6 0%, #0ea5e9 50%, #d946ef 100%)',
    choices: [
      { text: '–ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è', next: 'start', emoji: 'üÜï' }
    ]
  },
  leave: {
    id: 'leave',
    character: 'üö∂',
    text: '–í—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–π–Ω—ã –ª—É—á—à–µ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å. –í—ã —É—Ö–æ–¥–∏—Ç–µ –º—É–¥—Ä–µ–µ, —á–µ–º –ø—Ä–∏—à–ª–∏.',
    background: 'linear-gradient(135deg, #2d1b4e 0%, #1a1f2c 100%)',
    choices: [
      { text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', next: 'start', emoji: 'üîÑ' }
    ]
  },
  change: {
    id: 'change',
    character: '‚ö°',
    text: '–í—ã –∏–∑–º–µ–Ω—è–µ—Ç–µ –ø—Ä–æ—à–ª–æ–µ! –ú–∏—Ä –≤–æ–∫—Ä—É–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç –º–µ—Ä—Ü–∞—Ç—å –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã...',
    background: 'linear-gradient(135deg, #f97316 0%, #d946ef 100%)',
    choices: [
      { text: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É', next: 'start', emoji: '‚Ü©Ô∏è' }
    ]
  },
  accept: {
    id: 'accept',
    character: '‚òÆÔ∏è',
    text: '–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ç–∞–∫–∏–º, –∫–∞–∫–æ–µ –æ–Ω–æ –µ—Å—Ç—å. –ß—É–≤—Å—Ç–≤–æ –ø–æ–∫–æ—è –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –≤–∞—Å. –í—ã –æ–±—Ä–µ–ª–∏ –º—É–¥—Ä–æ—Å—Ç—å.',
    background: 'linear-gradient(135deg, #0ea5e9 0%, #8b5cf6 100%)',
    choices: [
      { text: '–ù–æ–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', next: 'start', emoji: 'üåü' }
    ]
  },
  listen: {
    id: 'listen',
    character: 'üëë',
    text: '–°—Ç—Ä–∞–∂ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –≤–∞–º –≤–µ–ª–∏–∫—É—é —Ç–∞–π–Ω—É: –≤—ã - –∏–∑–±—Ä–∞–Ω–Ω—ã–π –≥–µ—Ä–æ–π, —Å–ø–æ—Å–æ–±–Ω—ã–π —Å–ø–∞—Å—Ç–∏ —ç—Ç–æ—Ç –º–∏—Ä. –í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å —ç—Ç—É –º–∏—Å—Å–∏—é?',
    background: 'linear-gradient(135deg, #d946ef 0%, #f97316 100%)',
    choices: [
      { text: '–ü—Ä–∏–Ω—è—Ç—å –º–∏—Å—Å–∏—é', next: 'hero', emoji: '‚öîÔ∏è' },
      { text: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', next: 'refuse', emoji: '‚ùå' }
    ]
  },
  refuse: {
    id: 'refuse',
    character: 'üö™',
    text: '–í—ã –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è... –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—Ä–µ–º—è.',
    background: 'linear-gradient(135deg, #1a1f2c 0%, #2d1b4e 100%)',
    choices: [
      { text: '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', next: 'start', emoji: 'üîÑ' }
    ]
  },
  hero: {
    id: 'hero',
    character: 'ü¶∏',
    text: '–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –º–∏—Å—Å–∏—é! –°–∏–ª–∞ –≥–µ—Ä–æ—è –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –≤–∞—Å. –í–∞—à–∞ –ª–µ–≥–µ–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!',
    background: 'linear-gradient(135deg, #f97316 0%, #d946ef 50%, #8b5cf6 100%)',
    choices: [
      { text: '–ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ', next: 'start', emoji: 'üéÆ' }
    ]
  }
};

export default function Index() {
  const [currentNode, setCurrentNode] = useState<string>('start');
  const [displayedText, setDisplayedText] = useState<string>('');
  const [isTyping, setIsTyping] = useState<boolean>(false);
  const [history, setHistory] = useState<string[]>(['start']);

  const node = story[currentNode];

  useEffect(() => {
    setIsTyping(true);
    setDisplayedText('');
    let index = 0;
    const text = node.text;
    
    const timer = setInterval(() => {
      if (index < text.length) {
        setDisplayedText(text.slice(0, index + 1));
        index++;
      } else {
        setIsTyping(false);
        clearInterval(timer);
      }
    }, 30);

    return () => clearInterval(timer);
  }, [currentNode]);

  const handleChoice = (nextNode: string) => {
    if (isTyping) return;
    setHistory([...history, nextNode]);
    setCurrentNode(nextNode);
  };

  const goBack = () => {
    if (history.length > 1) {
      const newHistory = [...history];
      newHistory.pop();
      const previousNode = newHistory[newHistory.length - 1];
      setHistory(newHistory);
      setCurrentNode(previousNode);
    }
  };

  return (
    <div 
      className="min-h-screen flex items-center justify-center p-4 transition-all duration-1000"
      style={{ background: node.background }}
    >
      <div className="max-w-4xl w-full">
        <div className="text-center mb-8 animate-fade-in">
          <h1 className="text-5xl md:text-7xl font-bold text-white mb-2 drop-shadow-lg">
            –ó–∞–±—ã—Ç—ã–µ –ú–∏—Ä—ã
          </h1>
          <p className="text-white/80 text-lg">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è</p>
        </div>

        <Card className="p-8 md:p-12 bg-card/95 backdrop-blur-sm border-2 border-primary/30 shadow-2xl animate-slide-in">
          <div className="flex items-center gap-4 mb-6">
            <div className="text-6xl animate-pulse-glow">{node.character}</div>
            {history.length > 1 && (
              <Button
                variant="outline"
                size="sm"
                onClick={goBack}
                className="ml-auto"
              >
                <Icon name="Undo2" className="mr-2" size={16} />
                –ù–∞–∑–∞–¥
              </Button>
            )}
          </div>

          <div className="min-h-[200px] mb-8">
            <p className="text-xl md:text-2xl text-foreground leading-relaxed">
              {displayedText}
              {isTyping && <span className="animate-pulse">‚ñä</span>}
            </p>
          </div>

          <div className="space-y-3">
            {node.choices?.map((choice, index) => (
              <Button
                key={index}
                onClick={() => handleChoice(choice.next)}
                disabled={isTyping}
                className="w-full text-lg py-6 bg-primary hover:bg-primary/90 text-primary-foreground transition-all duration-300 hover:scale-105 hover:shadow-lg hover:shadow-primary/50 disabled:opacity-50 disabled:cursor-not-allowed"
                style={{ animationDelay: `${index * 100}ms` }}
              >
                <span className="mr-3 text-2xl">{choice.emoji}</span>
                {choice.text}
              </Button>
            ))}
          </div>

          <div className="mt-8 pt-6 border-t border-border/50 flex items-center justify-between text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <Icon name="BookOpen" size={16} />
              <span>–ì–ª–∞–≤–∞ {history.length}</span>
            </div>
            <div className="flex items-center gap-2">
              <Icon name="Map" size={16} />
              <span>{Object.keys(story).length} –ª–æ–∫–∞—Ü–∏–π</span>
            </div>
          </div>
        </Card>

        <div className="mt-6 text-center">
          <p className="text-white/60 text-sm">
            –ö–∞–∂–¥—ã–π –≤—ã–±–æ—Ä –º–µ–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é. –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –≤—Å–µ –ø—É—Ç–∏!
          </p>
        </div>
      </div>
    </div>
  );
}
